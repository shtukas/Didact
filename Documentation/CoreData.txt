
The principal design idea of CoreData is that we refer to specific storage units by a single string, called a Core Date Reference String, or just _reference string_. Note that mutations of the data may result in the string being updated, in any case the holder should always assume that an edit results in the string being updated.

reference strings categories:

    - "null" (when the node doesn't have one, for instance navigation nodes)

    - "nyx-directory:{directoryId}"
      The directory Id is the name of the directory in { Galaxy/Nyx/Directories }

    - "unique-string:#{uniquestring}""

    - "text:#{nhash}"
      The fragment is the named hash of the text in DatablobStore

    - "aion-point:#{nhash}"
      The nhash is the named hash of the root of the aion hierarchy

    - "url:#{nhash}"
      The nhash is the named hash of the url in the DatablobStore

-- (ignore below) ---------------------------------------------

We have distinct types of contents (or payloads) for Nyx Nodes.

1. A piece of text.

2. A URL

2. An aion point.

3. A Directory in the Nyx folder. More for data that we intend to modify every so often or for which it is more natural to have a directory. If the directory has a single file called Text.txt or URL.txt, then we assume that they are that piece of content.

4. A unique string reference, which can be searched for using atlas

5. A refrence to a nyx beacon.

NxNetworkPayload

{
    "mikuType" : "NxNetworkPayload",
    "type"     : "text"
    "text"     : String
}

{
    "mikuType" : "NxNetworkPayload",
    "type"     : "url"
    "url"      : String
}

{
    "mikuType" : "NxNetworkPayload",
    "type"     : "aion-point"
    "url"      : String
}

{
    "mikuType"   : "NxNetworkPayload",
    "type"       : "nyx:directory"
    "identifier" : String
}

{
    "mikuType"     : "NxNetworkPayload",
    "type"         : "unique-string"
    "uniquestring" : String
}

{
    "mikuType"   : "NxNetworkPayload",
    "type"       : "nyx:beacon"
    "identifier" : String
}

