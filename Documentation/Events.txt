### Events

We have two types of events

{
    "mikuType"   => "(object has been updated)",
    "objectuuid" => objectuuid,
}

{
    "mikuType"   => "(object has been logically deleted)",
    "objectuuid" => objectuuid,
}

{
    "mikuType"    => "(owner-elements-mapping-update)",
    "objectuuids" => Array[String],
}

{
    "mikuType"    => "(do not show until has been updated)",
    "targetuuid"  => uuid,
}

{
    "targetInstance" : TargetInstanceName # added by the broadcaster
    "mikuType"  => "NxBankEvent"
    "eventuuid" => String
    "setuuid"   => setuuid
    "unixtime"  => unixtime
    "date"      => date
    "weight"    => weight
}

{
    "targetInstance" : TargetInstanceName # added by the broadcaster
    "mikuType"       => "NxDoNotShowUntil",
    "targetuuid"     => uuid,
    "targetunixtime" => unixtime
}

{
    "targetInstance" : TargetInstanceName # added by the broadcaster
    "mikuType"   => "SetDoneToday"
    "targetuuid" => uuid
    "targetdate" => CommonUtils::today()
}

{
    "targetInstance" : TargetInstanceName # added by the broadcaster
    "mikuType"   => "NxDeleted"
    "objectuuid" => objectuuid
}

{
    "targetInstance" : TargetInstanceName # added by the broadcaster
    "mikuType"   => "Daily Slots: Unregister",
    "objectuuid" => objectuuid,
}

{
    "targetInstance" : TargetInstanceName # added by the broadcaster
    "mikuType"   => "Daily Slots: Register",
    "hour"       => hour,
    "objectuuid" => objectuuid,
}

{
    "targetInstance" : TargetInstanceName # added by the broadcaster
    "mikuType"       : "OwnerMapping"
    "eventuuid"      : String
    "owneruuid"      : String
    "itemuuid"       : String
}

{
    "mikuType" => "OwnerMapping-records",
    "records"  => OwnerMapping::records()
}

{
    "mikuType"  => "Bank-records",
    "records"   => Bank::records()
}

{
    "mikuType"   => "NetworkLinks",
    "eventuuid"  => String
    "sourceuuid" => sourceuuid,
    "operation"  => operation,
    "targetuuid" => targetuuid
}

{
    "mikuType" => "NetworkLinks-records",
    "records"  => NetworkLinks::records()
}

{
    "mikuType"   => "(element has been done for today)",
    "objectuuid" => objectuuid,
}

{
    "mikuType"   => "AttributeUpdate",
    "objectuuid" => objectuuid,
    "eventuuid"  => String
    "eventTime"  => Float
    "attname"    => string
    "attvalue"   => value
}

{
    "mikuType" : "XSyncStep0-a369" # Any instance receiving this publishes a Step 1.
                                   # It is sent to all other instances.
                                   # And self publishes Step1
                                   # Its purpose is to trigger a multi instance sync process from 
                                   # one instance.
}

{
    "mikuType" : "XSyncStep1-93b7"
    "sourceId" : instanceId,
                 We are sending this to tell the recipient that we want to know what they have
}

{
    "mikuType"                  : "XSyncStep2-e6db"
    "sourceId"                  : instanceId
    "nx1915s"                   : Array[nx1915]
    "bankEventsuuids"           : Array[eventuuid]
    "elementToOwnerEventsuuids" : Array[eventuuid]
    "networkLinksEventsuuids"   : Array[eventuuid]
                                  We are sending this to tell the recipient what we have
}

{
    "mikuType"                  : "XSyncStep3-b82e"
    "sourceId"                  : instanceId
    "nx1915s"                   : Array[nx1915]
    "bankEventsuuids"           : Array[eventuuid]
    "elementToOwnerEventsuuids" : Array[eventuuid]
    "networkLinksEventsuuids"   : Array[eventuuid]
                                  We are sending this to tell the receipient what we want
}
