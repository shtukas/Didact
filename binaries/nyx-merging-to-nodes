#!/usr/bin/ruby

# encoding: UTF-8

require_relative "../Libs/loader2.rb"

# ----------------------------------------------------------------------------

uuid1 = ARGV[0]
uuid2 = ARGV[1]

exit if uuid1.nil?
exit if uuid2.nil?

node1 = Nx31::getOrNull(uuid1)
if node1.nil? then
    puts "> I could not find a node for uuid: #{uuid1}"
    exit
end

node2 = Nx31::getOrNull(uuid2)
if node2.nil? then
    puts "> I could not find a node for uuid: #{uuid2}"
    exit
end

if uuid1 == uuid2 then
    puts "You have selected the same node twice"
    exit
end

# ----------------------------------------------
# reconciling links

Links::entities(node1["uuid"]).each{|nx31|
    puts "linking '#{Nx31::toString(nx31)}' to '#{Nx31::toStringWithTrace4(node2)}'"
    Links::link(nx31["uuid"], node2["uuid"])
}

Links::entities(node2["uuid"]).each{|nx31|
    puts "linking '#{Nx31::toString(nx31)}' to '#{Nx31::toStringWithTrace4(node1)}'"
    Links::link(nx31["uuid"], node1["uuid"])
}

# ----------------------------------------------
# reconciling tags

=begin
Tag {
    "uuid"      : String
    "unixtime"  : String
    "owneruuid" : String # uuid of the Entity that this tag is attached to
    "payload"   : String
}
=end

Tags::tagsForOwner(node1["uuid"]).each{|tag|
    puts "tagging '#{tag["payload"]}' to '#{Nx31::toStringWithTrace4(node2)}'"
    Tags::insert(SecureRandom.uuid, node2["uuid"], tag["payload"])
}

Tags::tagsForOwner(node2["uuid"]).each{|tag|
    puts "tagging '#{tag["payload"]}' to '#{Nx31::toStringWithTrace4(node1)}'"
    Tags::insert(SecureRandom.uuid, node1["uuid"], tag["payload"])
}

# ----------------------------------------------
# reconciling notes

=begin
Note {
    "noteuuid"   : String
    "objectuuid" : String
    "unixtime"   : Float
    "text"       : String
}
=end

Librarian7Notes::getObjectNotes(node1["uuid"]).each{|note|
    puts "note: #{note["text"]} to '#{Nx31::toStringWithTrace4(node2)}'"
    Librarian7Notes::addNote(node2["uuid"], note["text"])
}

Librarian7Notes::getObjectNotes(node2["uuid"]).each{|note|
    puts "note: #{note["text"]} to '#{Nx31::toStringWithTrace4(node1)}'"
    Librarian7Notes::addNote(node1["uuid"], note["text"])
}

# ----------------------------------------------

loop {
    system("clear")
    puts "Visit (and select later which will be deleted):"
    node = LucilleCore::selectEntityFromListOfEntitiesOrNull("node", [node1, node2], lambda{|node| Nx31::toStringWithTrace4(node) })
    break if node.nil?
    Nx31::landing(node)
}

loop {
    system("clear")
    puts "Select the node to delete"
    node = LucilleCore::selectEntityFromListOfEntitiesOrNull("node", [node1, node2], lambda{|node| Nx31::toStringWithTrace4(node) })
    break if node.nil?
    Nx31::destroy(node["uuid"])
    break
}

node = [uuid1, uuid2].map{|uuid| Nx31::getOrNull(uuid) }.compact.first

puts "Survior:"
sleep 1
Nx31::landing(node)

