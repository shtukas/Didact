#!/usr/bin/ruby

# encoding: UTF-8

$RunNonEssentialThreads = true

require_relative "Libs/loader.rb"

# ----------------------------------------------------------------------------

def getDropFilepathOrNull(folderpath)
    LucilleCore::locationsAtFolder(folderpath)
        .select{|location| File.basename(location).start_with?("QuantumDrop-") }
        .first
end

def getTargetLocation(folderpath, dropFilepath)
    locations = LucilleCore::locationsAtFolder(folderpath)
                .select{|location| File.basename(location)[0, 1] != "." }
                .select{|location| location != dropFilepath }
    if locations.size == 0 then
        puts "I am looking for a possible aion-point target at location: '#{folderpath.green}', and I can't find one"
        exit
    end
    if locations.size >= 2 then
        puts "I am looking for a possible aion-point target at location: '#{folderpath.green}', and I can find more than one candidate"
        exit
    end
    locations[0]
end

folderpath1 = Dir.pwd()
puts "folderpath1: #{folderpath1}"

dropFilepath = getDropFilepathOrNull(folderpath1)
puts "dropFilepath: #{dropFilepath}"

aionPointLocation = getTargetLocation(folderpath1, dropFilepath)

puts "aionPointLocation: #{aionPointLocation}"

nx113 = Nx113Make::aionpoint(aionPointLocation)

puts "nx113: #{JSON.pretty_generate(nx113)}"

quantumState = {
    "uuid"      => SecureRandom.uuid,
    "mikuType"  => "NxQuantumState",
    "unixtime"  => Time.new.to_f,
    "rootnhash" => nx113["rootnhash"],
    "database"  => nx113["database"]
}

puts "quantumState: #{JSON.pretty_generate(quantumState)}"

drop = JSON.parse(IO.read(dropFilepath))

drop["quantumStates"] << quantumState

puts "updated drop: #{JSON.pretty_generate(drop)}"

File.open(dropFilepath, "w"){|f| f.puts(JSON.pretty_generate(drop))}

node = NyxNodes::getNyxNodeByQuantumDropUUIDOrNull(drop["uuid"])

if node.nil? then
    puts "I could not find a NyxNode for the prod"
    exit
end

puts "node: #{JSON.pretty_generate(node)}"

node["payload_1"]["drop"] = drop

NyxNodes::commitObject(node)

QuantumDrops::propagateQuantumDrop(drop) # this is to propagate to other possible fs locations
