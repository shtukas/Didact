#!/usr/bin/ruby

# encoding: UTF-8

$RunNonEssentialThreads = true

require_relative "Libs/loader.rb"

# ----------------------------------------------------------------------------

fiberFilepath = ARGV[0]

#puts "fiberFilepath: '#{fiberFilepath}'"

if File.basename(fiberFilepath)[-12, 12] != ".NxGridFiber" then
    puts "We expect suffix .NxGridFiber for a fiber file".red
    exit
end

if !File.exists?(fiberFilepath) then
    puts "target fiber file (#{fiberFilepath}) not found".red
    exit
end

fiber = JSON.parse(IO.read(fiberFilepath))

referenceFolder = fiberFilepath.gsub(".NxGridFiber", "")

if !File.exists?(referenceFolder) then
    puts "reference folder (#{referenceFolder}) not found".red
    exit
end

state = NxGridFiber::locationToNxFiberState(referenceFolder)
FileSystemCheck::fsck_NxFiberState(state, SecureRandom.hex, true)

states = fiber["states"] + [state]
fiber["states"] = states

File.open(fiberFilepath, "w"){|f| f.puts(JSON.pretty_generate(fiber))}

nyxnode = NxGridFiberFileSystemIntegration::getNyxNodeByFiberUUIDOrNull(fiber["uuid"])

if nyxnode.nil? then
    puts "Interestingly, I could not find a NyxNode for this Fiber".red
    exit
end

payload = {
    "mikuType" => "NyxNodePayload1",
    "type"     => "NxGridFiber",
    "fiber"    => fiber
}

nyxnode["payload_1"] = payload

#puts "nyxnode: #{JSON.pretty_generate(nyxnode)}"

#puts "NyxNodes::commitObject(#{JSON.pretty_generate(nyxnode)})"

NyxNodes::commitObject(nyxnode)

#puts "NxGridFiberFileSystemIntegration::propagateFiber(#{JSON.pretty_generate(fiber)})"

NxGridFiberFileSystemIntegration::propagateFiber(fiber)
