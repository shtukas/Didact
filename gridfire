#!/usr/bin/ruby

# encoding: UTF-8

$RunNonEssentialThreads = false

require_relative "Libs/loader.rb"

# ----------------------------------------------------------------------------


def selectAndOpenNx7AtThisDirectory()
    filepaths = LucilleCore::locationsAtFolder(Dir.pwd)
                    .select{|filepath| filepath[-4, 4] == ".Nx7" }

    filepath = LucilleCore::selectEntityFromListOfEntitiesOrNull("Nx7", filepaths, lambda{|filepath| File.basename(filepath) })

    exportFolder = filepath.gsub(".Nx7", "")
    if File.exists?(exportFolder) then
        puts "There already is an export folder for: #{File.basename(filepath)}"
        exit
    end
    item = Nx5Ext::readFileAsAttributesOfObject(filepath)
    operator = ElizabethNx5.new(filepath)
    if item["nx7Payload"]["type"] == "Data" then
        state = item["nx7Payload"]["state"]
        FileUtils.mkdir(exportFolder) # creation of the data export folder
        GridState::exportStateAtFolder(operator, state, exportFolder)
    else
        puts "This is not a data carrier. Payload type: #{item["nx7Payload"]["type"]}."
        LucilleCore::pressEnterToContinue()
        children = Nx7::children(item)
        if children.size > 0 then
            if LucilleCore::askQuestionAnswerAsBoolean("I can see that it has children, would you like me to export them for you ? ") then
                FileUtils.mkdir(exportFolder) # creation of the children presentation folder
                children.each{|child|
                    childfilepath1 = Nx7::existingItemFilepathOrNull(child["uuid"])
                    next if childfilepath1.nil? # that should not happen, should it ? ðŸ¤”
                    childfilepath2 = "#{exportFolder}/#{CommonUtils::sanitiseStringForFilenaming(child["description"])}.Nx7"
                    FileUtils.cp(childfilepath1, childfilepath2)
                }
            end
        else
            puts "I can also see that it has no children."
            LucilleCore::pressEnterToContinue()
        end
    end
end


actions = [
    "select and open Nx7 at this directory",
    "Nx7 network maintenance",
]
action = LucilleCore::selectEntityFromListOfEntitiesOrNull("action", actions)

if action == "select and open Nx7 at this directory" then
    selectAndOpenNx7AtThisDirectory()
end

if action == "Nx7 network maintenance" then
    AutomaticNx7NetworkMainteance::run()
    XCache::set("network-maintenance-time-aa34c002-96b1-43b4-a7fd-275af066150f", Time.new.to_i)
end