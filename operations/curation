#!/usr/bin/ruby

# encoding: UTF-8

require_relative "../Libs/loader.rb"

exit

# ========================================================================================
# Landing on items with related (biggest number of related comes first)

$cache = {}

def size(uuid)
    return $cache[uuid] if $cache[uuid]
    puts "looking  : #{uuid}"
    count = XCache::getOrNull("a99a66c3-3a38-4dbd-a3ae-c1e6ecd516db:#{uuid}")
    if count then
        count = count.to_i
        $cache[uuid] = count
        return count.to_i 
    end
    puts "computing: #{uuid}"
    count = NetworkEdges::relatedUUIDs(uuid).count
    XCache::set("a99a66c3-3a38-4dbd-a3ae-c1e6ecd516db:#{uuid}", count)
    $cache[uuid] = count
    count
end

loop {
    objectuuid = Items::objectuuids()
                    .reduce(nil){|objectuuid, uuid|
                        if size(objectuuid) > size(uuid) then
                            objectuuid
                        else
                            uuid
                        end
                    }
    item = Items::getItemOrNull(objectuuid)
    raise "item is null" if item.nil?
    count = NetworkEdges::relateds(item["uuid"]).count
    XCache::set("a99a66c3-3a38-4dbd-a3ae-c1e6ecd516db:#{item["uuid"]}", count)
    $cache[item["uuid"]] = count
    next if count == 0
    PolyActions::landing(item)
    count = NetworkEdges::relateds(item["uuid"]).count
    XCache::set("a99a66c3-3a38-4dbd-a3ae-c1e6ecd516db:#{item["uuid"]}", count)
    $cache[item["uuid"]] = count
}

exit

objectuuid = "efb38585-43fb-46dc-bdbb-1065fe30743e"
item = Items::getItemOrNull(objectuuid)
relateduuids = NetworkEdges::relatedUUIDs(objectuuid) - ["d14d5d37-8c49-470b-b927-af7a9fb0a8f2"]
relateduuids.each{|uuid|
    NetworkEdges::arrow(objectuuid, uuid)
    NetworkEdges::detach(objectuuid, uuid)
}

exit

objectuuid = "286a64a4-c9d2-49f6-8e7f-7edacea10ec6"
item = Items::getItemOrNull(objectuuid)
relateduuids = NetworkEdges::relatedUUIDs(objectuuid) - []
relateduuids.each{|uuid|
    puts "recasting: #{uuid}"
    NetworkEdges::arrow(objectuuid, uuid)
    NetworkEdges::detach(objectuuid, uuid)
}
exit