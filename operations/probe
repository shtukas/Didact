#!/usr/bin/ruby

# encoding: UTF-8

require_relative "../Libs/loader.rb"

uuid = ARGV[0]

filepath = Fx18s::objectuuidToLocalFx18Filepath(uuid)
puts "filepath: #{filepath}"
if filepath.nil? then
    puts "filepath: #{filepath} [does not exists]"
    exit
else
    puts "filepath: #{filepath} âœ…"
end

item = Fx18s::getItemAliveOrNull(uuid)
if item.nil? then
    puts "Could not find a alive item for uuid: #{uuid}"
    exit
end
puts JSON.pretty_generate(item)

presentInSection2 = Catalyst::section2().any?{|element| element["uuid"] == item["uuid"] }
puts "presentInSection2: #{presentInSection2}"

puts "DoNotShowUntil::isVisible(uuid): #{DoNotShowUntil::isVisible(uuid)}"
puts "InternetStatus::itemShouldShow(uuid): #{InternetStatus::itemShouldShow(uuid)}"

puts "File.exists?(filepath): #{File.exists?(filepath)}"

puts "eventuuids:"
puts Fx18sSynchronisation::getEventuuids(filepath)

if item["mikuType"] == "NxLine" then
    puts "NxLine: NxGroups::elementuuidToThreaduuidOrNull(uuid) #{NxGroups::elementuuidToThreaduuidOrNull(uuid)}"
end